
  
  
  
  
  Dealing with box constraints  - Flutter 
  

  
  
  

  
  
  

  
  

  
  
  
  
  

  
  
  
  
  
  

  


    












Docs



Get started


1. Install

2. Set up an editor

3. Test drive

4. Write your first app

5. Learn more

From another platform?
    


Flutter for Android devs

Flutter for iOS devs

Flutter for React Native devs

Flutter for web devs

Flutter for Xamarin.Forms devs



Dart language overview



Samples & tutorials


Sample apps on GitHub

Cookbook

Codelabs

Tutorials



Development


User interface
    


Introduction to Widgets

Building layouts
    


Layouts in Flutter


Tutorial


Box constraints




Adding interactivity

Assets and images

Navigation & routing

Animations
    


Introduction


Overview


Tutorial


Hero animations


Staggered animations




Advanced UI
    


Slivers


Gestures




Widget catalog



Data & backend
    


State management
    


Introduction


Think declaratively


Ephemeral vs app state


Simple app state management


Options




JSON and serialization

Firebase



Accessibility & internationalization
    


Accessibility

Internationalization



Platform integration
    


Writing platform-specific code



Packages & plugins
    


Using packages

Developing packages & plugins

Background processes

Package site



Tools & techniques
    


Android Studio / IntelliJ

Visual Studio Code

Flutter SDK
    


Upgrading


Archive




Hot reload

Code formatting

Widget inspector




Testing & optimization


Debugging

Using OEM debuggers

Flutter's build modes

Testing

Performance best practices

Performance profiling



Deployment


Creating flavors for Flutter

Build and release for Android

Build and release for iOS

Continuous deployment with fastlane



Resources


Dart resources

Inside Flutter

Technical overview

Technical videos for learning Flutter

FAQ



Reference


Widget index

API reference

Package site





Showcase


Community









Get started




      Flutter 1.0 has been released!
      Learn more.
    

      Help improve Flutter! 
      Take our survey.
    





Get started


1. Install

2. Set up an editor

3. Test drive

4. Write your first app

5. Learn more

From another platform?
    


Flutter for Android devs

Flutter for iOS devs

Flutter for React Native devs

Flutter for web devs

Flutter for Xamarin.Forms devs



Dart language overview



Samples & tutorials


Sample apps on GitHub

Cookbook

Codelabs

Tutorials



Development


User interface
    


Introduction to Widgets

Building layouts
    


Layouts in Flutter


Tutorial


Box constraints




Adding interactivity

Assets and images

Navigation & routing

Animations
    


Introduction


Overview


Tutorial


Hero animations


Staggered animations




Advanced UI
    


Slivers


Gestures




Widget catalog



Data & backend
    


State management
    


Introduction


Think declaratively


Ephemeral vs app state


Simple app state management


Options




JSON and serialization

Firebase



Accessibility & internationalization
    


Accessibility

Internationalization



Platform integration
    


Writing platform-specific code



Packages & plugins
    


Using packages

Developing packages & plugins

Background processes

Package site



Tools & techniques
    


Android Studio / IntelliJ

Visual Studio Code

Flutter SDK
    


Upgrading


Archive




Hot reload

Code formatting

Widget inspector




Testing & optimization


Debugging

Using OEM debuggers

Flutter's build modes

Testing

Performance best practices

Performance profiling



Deployment


Creating flavors for Flutter

Build and release for Android

Build and release for iOS

Continuous deployment with fastlane



Resources


Dart resources

Inside Flutter

Technical overview

Technical videos for learning Flutter

FAQ



Reference


Widget index

API reference

Package site






    Contents
    
    

Unbounded constraints
Flex












Dealing with box constraints


Docs


Development


UI


Layout


Box constraints







    Contents
    

Unbounded constraints
Flex



 Note:
  You may be directed to this page if the framework detects a problem involving
  box constraints.

In Flutter, widgets are rendered by their underlying
RenderBox
objects. Render boxes are given
constraints by their parent, and size themselves within those
constraints. Constraints consist of minimum and maximum widths and
heights; sizes consist of a specific width and height.
Generally, there are three kinds of boxes, in terms of how they handle
their constraints:

Those that try to be as big as possible.
For example, the boxes used by Center and ListView.
Those that try to be the same size as their children.
For example, the boxes used by Transform and Opacity.
Those that try to be a particular size.
For example, the boxes used by Image and Text.

Some widgets, for example Container, vary from type to type based on
their constructor arguments. In the case of Container, it defaults
to trying to be as big as possible, but if you give it a width, for
instance, it tries to honor that and be that particular size.
Others, for example Row and Column (flex boxes) vary based on the
constraints they are given, as described below in the “Flex” section.
The constraints are sometimes “tight”, meaning that they leave no room
for the render box to decide on a size (e.g. if the minimum and
maximum width are the same, it is said to have a tight width). The
main example of this is the App widget, which is contained by the
RenderView
class: the box used by the child returned by the
application’s build
function is given a constraint that forces it to
exactly fill the application’s content area (typically, the entire
screen). Many of the boxes in Flutter, especially those that just take a
single child, pass their constraint on to their children. This
means that if you nest a bunch of boxes inside each other at the root
of your application’s render tree, they’ll all exactly fit in each
other, forced by these tight constraints.
Some boxes loosen the constraints, meaning the maximum is maintained
but the minimum is removed. For example,
Center.

Unbounded constraints
In certain situations, the constraint that is given to a box is
unbounded, or infinite. This means that either the maximum width or
the maximum height is set to double.INFINITY.
A box that tries to be as big as possible won’t function usefully when
given an unbounded constraint and, in debug mode, such a combination
throws an exception that points to this file.
The most common cases where a render box finds itself with unbounded
constraints are within flex boxes
(Row
and Column),
and within scrollable regions
(ListView
and other ScrollView subclasses).
In particular, ListView
tries to expand to fit the space available
in its cross-direction (for example, if it’s a vertically-scrolling block,
it tries to be as wide as its parent). If you nest a vertically
scrolling ListView
inside a horizontally scrolling ListView,
the inner one tries to be as wide as possible, which is infinitely
wide, since the outer one is scrollable in that direction.

Flex
Flex boxes themselves
(Row
and Column)
behave differently based on
whether they are in a bounded constraints or unbounded constraints in
their given direction.
In bounded constraints, they try to be as big as possible in that
direction.
In unbounded constraints, they try to fit their children in that
direction. In this case, you cannot set flex on the children to
anything other than 0 (the default). In the widget library, this
means that you cannot use Expanded
when the flex box is inside
another flex box or inside a scrollable. If you do, you’ll get an
exception message pointing you at this document.
In the cross direction, i.e. in their width for
Column
(vertical flex) and in their height for
Row
(horizontal flex), they must never be unbounded,
otherwise they would not be able to reasonably align their children.












flutter-dev@
terms
security
privacy
español
社区中文资源


            Except as otherwise noted,
            this work is licensed under a
            Creative
            Commons Attribution 4.0 International License,
            and code samples are licensed under the BSD License.
          





