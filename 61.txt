
  
  
  
  
  Upgrading Flutter  - Flutter 
  

  
  
  

  
  
  

  
  

  
  
  
  
  

  
  
  
  
  
  

  


    












Docs



Get started


1. Install

2. Set up an editor

3. Test drive

4. Write your first app

5. Learn more

From another platform?
    


Flutter for Android devs

Flutter for iOS devs

Flutter for React Native devs

Flutter for web devs

Flutter for Xamarin.Forms devs



Dart language overview



Samples & tutorials


Sample apps on GitHub

Cookbook

Codelabs

Tutorials



Development


User interface
    


Introduction to Widgets

Building layouts
    


Layouts in Flutter


Tutorial


Box constraints




Adding interactivity

Assets and images

Navigation & routing

Animations
    


Introduction


Overview


Tutorial


Hero animations


Staggered animations




Advanced UI
    


Slivers


Gestures




Widget catalog



Data & backend
    


State management
    


Introduction


Think declaratively


Ephemeral vs app state


Simple app state management


Options




JSON and serialization

Firebase



Accessibility & internationalization
    


Accessibility

Internationalization



Platform integration
    


Writing platform-specific code



Packages & plugins
    


Using packages

Developing packages & plugins

Background processes

Package site



Tools & techniques
    


Android Studio / IntelliJ

Visual Studio Code

Flutter SDK
    


Upgrading


Archive




Hot reload

Code formatting

Widget inspector




Testing & optimization


Debugging

Using OEM debuggers

Flutter's build modes

Testing

Performance best practices

Performance profiling



Deployment


Creating flavors for Flutter

Build and release for Android

Build and release for iOS

Continuous deployment with fastlane



Resources


Dart resources

Inside Flutter

Technical overview

Technical videos for learning Flutter

FAQ



Reference


Widget index

API reference

Package site





Showcase


Community









Get started




      Flutter 1.0 has been released!
      Learn more.
    

      Help improve Flutter! 
      Take our survey.
    





Get started


1. Install

2. Set up an editor

3. Test drive

4. Write your first app

5. Learn more

From another platform?
    


Flutter for Android devs

Flutter for iOS devs

Flutter for React Native devs

Flutter for web devs

Flutter for Xamarin.Forms devs



Dart language overview



Samples & tutorials


Sample apps on GitHub

Cookbook

Codelabs

Tutorials



Development


User interface
    


Introduction to Widgets

Building layouts
    


Layouts in Flutter


Tutorial


Box constraints




Adding interactivity

Assets and images

Navigation & routing

Animations
    


Introduction


Overview


Tutorial


Hero animations


Staggered animations




Advanced UI
    


Slivers


Gestures




Widget catalog



Data & backend
    


State management
    


Introduction


Think declaratively


Ephemeral vs app state


Simple app state management


Options




JSON and serialization

Firebase



Accessibility & internationalization
    


Accessibility

Internationalization



Platform integration
    


Writing platform-specific code



Packages & plugins
    


Using packages

Developing packages & plugins

Background processes

Package site



Tools & techniques
    


Android Studio / IntelliJ

Visual Studio Code

Flutter SDK
    


Upgrading


Archive




Hot reload

Code formatting

Widget inspector




Testing & optimization


Debugging

Using OEM debuggers

Flutter's build modes

Testing

Performance best practices

Performance profiling



Deployment


Creating flavors for Flutter

Build and release for Android

Build and release for iOS

Continuous deployment with fastlane



Resources


Dart resources

Inside Flutter

Technical overview

Technical videos for learning Flutter

FAQ



Reference


Widget index

API reference

Package site






    Contents
    
    

One-time setup
Upgrading the Flutter SDK and packages
Switching Flutter channels
Upgrading packages only
Keeping informed












Upgrading Flutter


Docs


Development


Tools


SDK


Upgrading







    Contents
    

One-time setup
Upgrading the Flutter SDK and packages
Switching Flutter channels
Upgrading packages only
Keeping informed


No matter which Flutter release channel you follow,
you can use the flutter command to upgrade your Flutter SDK
and the packages that your app depends on.

One-time setup
For the flutter command to work correctly,
your app’s pubspec.yaml file must require the Flutter SDK.
For example, the following snippet specifies that the
flutter and flutter_test packages require the Flutter SDK:
name: hello_world
dependencies:
  flutter:
    sdk: flutter
dev_dependencies:
  flutter_test:
    sdk: flutter


 Warning:
Don’t use the pub get or pub upgrade commands to manage dependencies
for Flutter apps.
Instead, use flutter packages get or flutter packages upgrade.
If you want to use pub manually, you can run it directly by setting the
FLUTTER_ROOT environment variable.


Upgrading the Flutter SDK and packages
To update both the Flutter SDK and the packages that your app depends on,
use the flutter upgrade command from the root of your app
(the same directory that contains the pubspec.yaml file):
$ flutter upgrade

This command first gets the most recent version of the Flutter SDK
that’s available on your Flutter channel.
Then this command updates each package that your app depends on
to the most recent compatible version.
If you want an even more recent version of the Flutter SDK,
switch to a less stable Flutter channel
and then run flutter upgrade.

Switching Flutter channels
Flutter has four release channels:
stable, beta, dev, and master.
We recommend using the stable channel
unless you need a more recent release.
To view your current channel, use the following command:
$ flutter channel

To change to another channel, use flutter channel <channel-name>.
Once you’ve changed your channel, use flutter upgrade
to download the Flutter SDK and dependent packages.
For example:
$ flutter channel dev
$ flutter upgrade


 Note:
If you need a specific version of the Flutter SDK,
you can download it from the Flutter SDK archive.


Upgrading packages only
If you’ve modified your pubspec.yaml file or you want to update
only the packages that your app depends upon (instead of both the packages and
Flutter itself), then use one of the flutter packages commands.
To get all the dependencies listed in the pubspec.yaml file,
without unnecessary updates, use the get command:
$ flutter packages get

To update to the latest compatible versions of
all the dependencies listed in the pubspec.yaml file,
use the upgrade command:
$ flutter packages upgrade


Keeping informed
We publish breaking change announcements to our mailing list.
We strongly recommend that you subscribe to get announcements from us.
Plus, we’d love to hear from you!












flutter-dev@
terms
security
privacy
español
社区中文资源


            Except as otherwise noted,
            this work is licensed under a
            Creative
            Commons Attribution 4.0 International License,
            and code samples are licensed under the BSD License.
          





